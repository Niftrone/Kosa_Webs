package web.servlet.controller;

import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

//확장자가 .do로 들어오는 모든 요청은 DispatcherServlet이 받는다!!
@WebServlet("*.do")
public class DispatcherServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
         
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doProcess(request, response);
	}
	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doProcess(request, response);
	}
	/*
	 이전 방식과는 다른 방식으로 command값을 받아보자
	 hidden태그 방식이 아닌
	 들어온 요청을 집적 받아서 command값으로 연결.
	 */
	protected void doProcess(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String requestURI=request.getRequestURI();// web16_CafeMember_FactoryPattern/find.do
		System.out.println("getRequestURI() =>"+requestURI);
		
		String contextPath=request.getContextPath(); //web16_CafeMember_FactoryPattern
		System.out.println("getContextPath() =>"+contextPath);
		
		String command = requestURI.substring(contextPath.length()+1);
		System.out.println("command =>"+command);//update.do
		
		//1. command값을 주고 Controller를 반환
		Controller controller=HandlerMapping.getInstance().createController(command);
		
		//2. Controller의 기능을 호출...FindController가 실행...ModelAndView를 반환
		ModelAndView mv = null;
		String path = "index.jsp";
		try {
			mv=controller.handleRequest(request, response);
			path = mv.getPath();
			
			if(mv != null) {
				if(mv.isRedirect()) response.sendRedirect(path);
				else request.getRequestDispatcher(path).forward(request, response);
			}
		}catch(Exception e) {
			System.out.println(e);
		}
	}

}











